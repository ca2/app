#pragma once


#define const_CHAR_TYPE_trigger const CHAR_TYPE *


namespace str
{


   inline  constexpr auto     char_length_to_byte_length(const_CHAR_TYPE_trigger, character_count nCharLength);
   inline  constexpr auto     byte_length_to_char_length(const_CHAR_TYPE_trigger, memsize nByteLength);

   inline  CHAR_TYPE *         char_next(const CHAR_TYPE * point) noexcept;
   inline  i32                is_digit(const CHAR_TYPE * pch) noexcept;
   inline  i32                is_space(const CHAR_TYPE * pch) noexcept;
   inline  i32                string_compare(const CHAR_TYPE * pszA, const CHAR_TYPE * pszB) noexcept;
   inline  i32                case_insensitive_string_compare(const CHAR_TYPE * pszA, const CHAR_TYPE * pszB) noexcept;
   inline  i32                string_count_compare(const CHAR_TYPE * pszA, const CHAR_TYPE * pszB, character_count len) noexcept;
   inline  i32                case_insensitive_string_count_compare(const CHAR_TYPE * pszA, const CHAR_TYPE * pszB, character_count len) noexcept;
   inline  i32                string_collate(const CHAR_TYPE * pszA, const CHAR_TYPE * pszB) noexcept;
   inline  i32                case_insensitive_string_collate(const CHAR_TYPE * pszA, const CHAR_TYPE * pszB) noexcept;
   inline  const CHAR_TYPE *   string_find_string(const CHAR_TYPE * pszBlock, const CHAR_TYPE * pszMatch) noexcept;
   inline  const CHAR_TYPE *   case_insensitive_string_find_string(const CHAR_TYPE * pszBlock, const CHAR_TYPE * pszMatch) noexcept;
   inline  const CHAR_TYPE *   string_find_char(const CHAR_TYPE * pszBlock, CHAR_TYPE chMatch) noexcept;
   inline  const CHAR_TYPE *   string_find_char_reverse(const CHAR_TYPE * psz, CHAR_TYPE ch, character_count iStart) noexcept;
   inline  const CHAR_TYPE *   string_find_string_reverse(const CHAR_TYPE * psz, const CHAR_TYPE * pszFind, character_count iStart) noexcept;
   inline  const CHAR_TYPE *   string_scan_set(const CHAR_TYPE * pszBlock, const CHAR_TYPE * pszMatch) noexcept;
   inline  character_count            string_span_including(const CHAR_TYPE * pszBlock, const CHAR_TYPE * pszSet) noexcept;
   inline  character_count            string_span_excluding(const CHAR_TYPE * pszBlock, const CHAR_TYPE * pszSet) noexcept;
   inline  CHAR_TYPE *         string_uppercase(CHAR_TYPE * psz) noexcept;
   inline  CHAR_TYPE *         string_lowercase(CHAR_TYPE * psz) noexcept;
   inline  CHAR_TYPE *         string_uppercase(CHAR_TYPE * psz, character_count size) noexcept;
   inline  CHAR_TYPE *         string_lowercase(CHAR_TYPE * psz, character_count size) noexcept;
   inline  CHAR_TYPE *         string_reverse(CHAR_TYPE * psz) noexcept;
   inline  character_count            string_get_length(const CHAR_TYPE * psz) noexcept;
   inline  character_count            get_char_length(const CHAR_TYPE * psz) noexcept { return string_get_length(scopedstr); }
   inline  character_count            get_formatted_length(const CHAR_TYPE * pszFormat, va_list args) noexcept;
   inline  character_count            string_format(CHAR_TYPE * pszBuffer, const CHAR_TYPE * pszFormat, va_list args) noexcept;
   inline  character_count            string_format(CHAR_TYPE * pszBuffer, character_count nlength, const CHAR_TYPE * pszFormat, va_list args) noexcept;
   inline  void               flood_characters(CHAR_TYPE * pwsz, CHAR_TYPE wch, character_count len) noexcept;

   inline  u32                format_message(u32 dwFlags, LPCVOID pSource, u32 dwMessageID, u32 dwLanguageID, CHAR_TYPE * pszBuffer, u32 nSize, va_list * pArguments) noexcept;
   inline  character_count            string_safe_length(const CHAR_TYPE * psz) noexcept;
   inline  u32                get_environment_variable(const CHAR_TYPE * pszVar, CHAR_TYPE * pszBuffer, u32 dwSize);

   inline  void               copy_string(CHAR_TYPE * pszDst, const CHAR_TYPE * pszSrc);
   inline  void               copy_chars(CHAR_TYPE * pchDest, const CHAR_TYPE * pchSrc, character_count nChars) noexcept;
   inline  void               copy_chars(CHAR_TYPE * pchDest, size_t nDestLen, const CHAR_TYPE * pchSrc, character_count nChars) noexcept;
   inline  void               copy_chars_overlapped(CHAR_TYPE * pchDest, const CHAR_TYPE * pchSrc, character_count nChars) noexcept;

#ifdef WINDOWS

   inline  BSTR               AllocSysString(const CHAR_TYPE * pchData, character_count nDataLength) noexcept;
   inline  bool               ReAllocSysString(BSTR * pbstr, const CHAR_TYPE * pchData, character_count nDataLength) noexcept;

#endif

} // namespace str



