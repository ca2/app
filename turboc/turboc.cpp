#include "framework.h"
#include "src/graphics.h"


volatile int TcGraphicsInitialized = 0;
int TcCurrentGraphMode,TcGraphResult = grOk;
int TcXresolution,TcYresolution,TcPageCount,TcPaletteNum;
//int TcDriver,TcVisualPage = 0,TcActivePage = 0;
//int TcForegroundColor,TcBackgroundColor,TcDriver;
int TcForegroundColor,TcBackgroundColor;
int TcViewLeft,TcViewTop,TcViewRight,TcViewBottom,TcViewClip;
int Tcx,Tcy,TcViewMaxx,TcViewMaxy;
int TcLastArcX = 0,TcLastArcY = 0,TcLastStangle = 0;
int TcLastEndangle = 0,TcLastRadius = 0;
int TcWritemode = 0,TcTextHoriz = 0,TcTextVert = 0;
struct linesettingstype TcLinestyle ={SOLID_LINE,0xffff,NORM_WIDTH};
RgbStruct TcColors[256];
const RgbStruct TcColors2[2] ={XBLACK,XWHITE};
const RgbStruct TcColorsC0[4] ={XBLACK,XLIGHTGREEN,XLIGHTRED,XYELLOW};
const RgbStruct TcColorsC1[4] ={XBLACK,XLIGHTCYAN,XLIGHTMAGENTA,XWHITE};
const RgbStruct TcColorsC2[4] ={XBLACK,XGREEN,XRED,XBROWN};
const RgbStruct TcColorsC3[4] ={XBLACK,XCYAN,XMAGENTA,XLIGHTGRAY};
const RgbStruct TcColors4[4] ={XBLACK,XDARKGRAY,XLIGHTGRAY,XWHITE};
const RgbStruct TcColors16[16] ={
   XBLACK,XBLUE,XGREEN,XCYAN,XRED,XMAGENTA,XBROWN,XLIGHTGRAY,
   XDARKGRAY,XLIGHTBLUE,XLIGHTGREEN,XLIGHTCYAN,XLIGHTRED,XLIGHTMAGENTA,
   XYELLOW,XWHITE
};
const struct palettetype TcDefaultPalette2 ={2,{BLACK,WHITE}};
const struct palettetype TcDefaultPaletteC0 =
{4,{BLACK,LIGHTGREEN,LIGHTRED,YELLOW}};
const struct palettetype TcDefaultPaletteC1 =
{4,{BLACK,LIGHTCYAN,LIGHTMAGENTA,WHITE}};
const struct palettetype TcDefaultPaletteC2 =
{4,{BLACK,GREEN,RED,BROWN}};
const struct palettetype TcDefaultPaletteC3 =
{4,{BLACK,CYAN,MAGENTA,LIGHTGRAY}};
const struct palettetype TcDefaultPalette4 =
{4,{BLACK,DARKGRAY,LIGHTGRAY,WHITE}};
const struct palettetype TcDefaultPalette16 ={
   16,
   {BLACK,BLUE,GREEN,CYAN,RED,MAGENTA,BROWN,LIGHTGRAY,
   DARKGRAY,LIGHTBLUE,LIGHTGREEN,LIGHTCYAN,LIGHTRED,LIGHTMAGENTA,
   YELLOW,WHITE}
};
struct palettetype TcCurrentPalette;
int TcTextFont,TcTextDirection,TcTextCharsize;
int TcTextMultX,TcTextDivX,TcTextMultY,TcTextDivY;
int TcFillStyle = SOLID_FILL,TcFillColor = 1;
char TcUserFillPattern[8] ={255,255,255,255,255,255,255,255};
#ifdef WITH_X
//struct TcPixmapPoolRecord TcPixmapPool[MAX_TCIMAGEBUFS] = { { 0 } };
//Display *TcDisplay;
//Window TcWindow;
//Pixmap TcPixmaps[16];
//gint TcScreen;
//GC TcGc;
//Colormap TcColormap;
//XColor TcXforeground,TcXbackground;
//Pixmap TcTile;
#endif // WITH_X






gint TcVideoMode = 0;
// The following arrays give unicode equivalents for all IBM PC characters,
// where possible.  The only one I wasn't able to find an equivalent for is
// the 0x9e character.  I don't even know what that one is!  For a long
// time it looked to me like an Rx symbol.  Now it looks like Pt (whatever 
// that is).  At any rate, I can't find an equivalent for either one.
// These characters all exist in the so-called GNU unifont, though not 
// necessarily in Adobe or other unifonts.
const int TcUnicodeMappings[256] ={
   // Row 0x00
   0x0040,	// 0x0
   0x263a,	// 0x1
   0x263b,	// 0x2
   0x2665,	// 0x3
   0x2666,	// 0x4
   0x2663,	// 0x5
   0x2660,	// 0x6
   0x2022,	// 0x7
   0x25d8,	// 0x8
   0x25e6,	// 0x9
   0x25d9,	// 0xa
   0x2642,	// 0xb
   0x2640,	// 0xc
   0x266a,	// 0xd
   0x266c,	// 0xe
   0x263c,	// 0xf
   // Row 0x10
   0x25b6,	// 0x0
   0x25c0,	// 0x1
   0x2195,	// 0x2
   0x203c,	// 0x3
   0x00b6,	// 0x4
   0x00a7,	// 0x5
   0x2582,	// 0x6
   0x21a8,	// 0x7
   0x2191,	// 0x8
   0x2193,	// 0x9
   0x2192,	// 0xa
   0x2190,	// 0xb
   0x2319,	// 0xc
   0x2194,	// 0xd
   0x25b2,	// 0xe
   0x25bc,	// 0xf
   // Row 0x20
   0x0020,	// 0x0
   0x0021,	// 0x1
   0x0022,	// 0x2
   0x0023,	// 0x3
   0x0024,	// 0x4
   0x0025,	// 0x5
   0x0026,	// 0x6
   0x0027,	// 0x7
   0x0028,	// 0x8
   0x0029,	// 0x9
   0x002a,	// 0xa
   0x002b,	// 0xb
   0x002c,	// 0xc
   0x002d,	// 0xd
   0x002e,	// 0xe
   0x002f,	// 0xf
   // Row 0x30
   0x0030,	// 0x0
   0x0031,	// 0x1
   0x0032,	// 0x2
   0x0033,	// 0x3
   0x0034,	// 0x4
   0x0035,	// 0x5
   0x0036,	// 0x6
   0x0037,	// 0x7
   0x0038,	// 0x8
   0x0039,	// 0x9
   0x003a,	// 0xa
   0x003b,	// 0xb
   0x003c,	// 0xc
   0x003d,	// 0xd
   0x003e,	// 0xe
   0x003f,	// 0xf
   // Row 0x40
   0x0040,	// 0x0
   0x0041,	// 0x1
   0x0042,	// 0x2
   0x0043,	// 0x3
   0x0044,	// 0x4
   0x0045,	// 0x5
   0x0046,	// 0x6
   0x0047,	// 0x7
   0x0048,	// 0x8
   0x0049,	// 0x9
   0x004a,	// 0xa
   0x004b,	// 0xb
   0x004c,	// 0xc
   0x004d,	// 0xd
   0x004e,	// 0xe
   0x004f,	// 0xf
   // Row 0x50
   0x0050,	// 0x0
   0x0051,	// 0x1
   0x0052,	// 0x2
   0x0053,	// 0x3
   0x0054,	// 0x4
   0x0055,	// 0x5
   0x0056,	// 0x6
   0x0057,	// 0x7
   0x0058,	// 0x8
   0x0059,	// 0x9
   0x005a,	// 0xa
   0x005b,	// 0xb
   0x005c,	// 0xc
   0x005d,	// 0xd
   0x005e,	// 0xe
   0x005f,	// 0xf
   // Row 0x60
   0x0060,	// 0x0
   0x0061,	// 0x1
   0x0062,	// 0x2
   0x0063,	// 0x3
   0x0064,	// 0x4
   0x0065,	// 0x5
   0x0066,	// 0x6
   0x0067,	// 0x7
   0x0068,	// 0x8
   0x0069,	// 0x9
   0x006a,	// 0xa
   0x006b,	// 0xb
   0x006c,	// 0xc
   0x006d,	// 0xd
   0x006e,	// 0xe
   0x006f,	// 0xf
   // Row 0x70
   0x0070,	// 0x0
   0x0071,	// 0x1
   0x0072,	// 0x2
   0x0073,	// 0x3
   0x0074,	// 0x4
   0x0075,	// 0x5
   0x0076,	// 0x6
   0x0077,	// 0x7
   0x0078,	// 0x8
   0x0079,	// 0x9
   0x007a,	// 0xa
   0x007b,	// 0xb
   0x007c,	// 0xc
   0x007d,	// 0xd
   0x007e,	// 0xe
   0x0020,	// 0xf
   // Row 0x80
   0x00c7,	// 0x0
   0x00fc,	// 0x1
   0x00e9,	// 0x2
   0x00e2,	// 0x3
   0x00e4,	// 0x4
   0x00e0,	// 0x5
   0x00e5,	// 0x6
   0x00e7,	// 0x7
   0x00ea,	// 0x8
   0x00eb,	// 0x9
   0x00e8,	// 0xa
   0x00ef,	// 0xb
   0x00ee,	// 0xc
   0x00ec,	// 0xd
   0x00c4,	// 0xe
   0x00c5,	// 0xf
   // Row 0x90
   0x00c9,	// 0x0
   0x00e6,	// 0x1
   0x00c6,	// 0x2
   0x00f4,	// 0x3
   0x00f6,	// 0x4
   0x00f2,	// 0x5
   0x00fb,	// 0x6
   0x00f9,	// 0x7
   0x00ff,	// 0x8
   0x00d6,	// 0x9
   0x00dc,	// 0xa
   0x00a2,	// 0xb
   0x00a3,	// 0xc
   0x00a5,	// 0xd
   0x00bc,	// 0xe
   0x0192,	// 0xf
   // Row 0xa0
   0x00e1,	// 0x0
   0x00ed,	// 0x1
   0x00f3,	// 0x2
   0x00fa,	// 0x3
   0x00f1,	// 0x4
   0x00d1,	// 0x5
   0x00aa,	// 0x6
   0x00ba,	// 0x7
   0x00bf,	// 0x8
   0x231c,	// 0x9
   0x231d,	// 0xa
   0x00bd,	// 0xb
   0x00bc,	// 0xc
   0x00a1,	// 0xd
   0x00ab,	// 0xe
   0x00bb,	// 0xf
   // Row 0xb0
   0x2591,	// 0x0
   0x2592,	// 0x1
   0x2593,	// 0x2
   0x2502,	// 0x3
   0x2524,	// 0x4
   0x2561,	// 0x5
   0x2562,	// 0x6
   0x2556,	// 0x7
   0x2555,	// 0x8
   0x2563,	// 0x9
   0x2551,	// 0xa
   0x2557,	// 0xb
   0x255d,	// 0xc
   0x255c,	// 0xd
   0x255b,	// 0xe
   0x2510,	// 0xf
   // Row 0xc0
   0x2514,	// 0x0
   0x2534,	// 0x1
   0x252c,	// 0x2
   0x251c,	// 0x3
   0x2500,	// 0x4
   0x253c,	// 0x5
   0x255e,	// 0x6
   0x255f,	// 0x7
   0x255a,	// 0x8
   0x2554,	// 0x9
   0x2569,	// 0xa
   0x2566,	// 0xb
   0x2560,	// 0xc
   0x2550,	// 0xd
   0x256c,	// 0xe
   0x2567,	// 0xf
   // Row 0xd0
   0x2568,	// 0x0
   0x2564,	// 0x1
   0x2565,	// 0x2
   0x2559,	// 0x3
   0x2558,	// 0x4
   0x2552,	// 0x5
   0x2553,	// 0x6
   0x256b,	// 0x7
   0x256a,	// 0x8
   0x2518,	// 0x9
   0x250c,	// 0xa
   0x2588,	// 0xb
   0x2585,	// 0xc
   0x258b,	// 0xd
   0x258a,	// 0xe
   0x2580,	// 0xf
   // Row 0xe0
   0x03b1,	// 0x0
   0x03b2,	// 0x1
   0x0393,	// 0x2
   0x03c0,	// 0x3
   0x03a3,	// 0x4
   0x03c3,	// 0x5
   0x03bc,	// 0x6
   0x03be,	// 0x7
   0x03a6,	// 0x8
   0x0398,	// 0x9
   0x03a9,	// 0xa
   0x03b4,	// 0xb
   0x221e,	// 0xc
   0x2205,	// 0xd
   0x2208,	// 0xe
   0x2229,	// 0xf
   // Row 0xf0
   0x2261,	// 0x0
   0x00b1,	// 0x1
   0x2265,	// 0x2
   0x2264,	// 0x3
   0x2320,	// 0x4
   0x2321,	// 0x5
   0x00f7,	// 0x6
   0x2248,	// 0x7
   0x00b0,	// 0x8
   0x2219,	// 0x9
   0x00ad,	// 0xa
   0x221a,	// 0xb
   0x207f,	// 0xc
   0x00b2,	// 0xd
   0x220e,	// 0xe
   0x019e	// 0xf
};


int directvideo = 1,_directvideo = 1,_wscroll = 1;
char TcKeybuf[TC_KEYBUF_SIZE];
gint TcKeybufStart = 0,TcKeybufSize = 0;
//pthread_mutex_t TcMutex = PTHREAD_MUTEX_INITIALIZER;
int ConioInitialized = 0;	// Becomes 1 after initialization.
struct text_info CurrentAttributes;
// CurrentWindow is NULL prior to initialization.  After initialization,
// it begins as the ncurses stdscr.  After the window function is used, it
// becomes something else.
//WINDOW *CurrentWindow = NULL;
int ColorPairsUsed;
int ConioRefreshOkay = 1;
